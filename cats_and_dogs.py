# -*- coding: utf-8 -*-
"""Cats and dogs

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1icnvOKIIHm4Ijou5u0HTkvcefnCPksia
"""

!wget --no-check-certificate \
    https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \
    -O /tmp/cats_and_dogs_filtered.zip

import os
import zipfile

local_zip = '/tmp/cats_and_dogs_filtered.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r') #Doc file zip
zip_ref.extractall('/tmp') #extarct vao file nao
zip_ref.close()

base_dir = '/tmp/cats_and_dogs_filtered'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'validation')

# Directory with our training cat pictures
train_cats_dir = os.path.join(train_dir, 'cats')

# Directory with our training dog pictures
train_dogs_dir = os.path.join(train_dir, 'dogs')

# Directory with our validation cat pictures
validation_cats_dir = os.path.join(validation_dir, 'cats')

# Directory with our validation dog pictures
validation_dogs_dir = os.path.join(validation_dir, 'dogs')

# Commented out IPython magic to ensure Python compatibility.
# %cd /tmp

# Commented out IPython magic to ensure Python compatibility.
# %cd /tmp/cats_and_dogs_filtered

# Commented out IPython magic to ensure Python compatibility.
# %cd train

# Commented out IPython magic to ensure Python compatibility.
# %cd cats

from tensorflow.keras import layers
from tensorflow.keras import Model

import tensorflow as tf

#preprocessing data

train_data_gen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)
val_data_gen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1./255)

#flow_from_directory: ảnh từ các classes khác nhau trong các folders khác nhau nhưng từ chung một parent folder
train_generator = train_data_gen.flow_from_directory(train_dir,
                                                     target_size=(150,150),
                                                     batch_size=32,
                                                     class_mode = "binary" #predict 0 or 1
                                                     )
val_generator = val_data_gen.flow_from_directory(validation_dir,
                                                     target_size=(150,150),
                                                     batch_size=32,
                                                     class_mode = "binary"
                                                     )

from tensorflow.keras import Sequential
from keras.layers import Conv2D, MaxPooling2D

from keras.layers import Activation, Dropout, Flatten, Dense

from keras import backend as K


img_width, img_height = 150, 150

#Code mo hinh
model = Sequential()
input_shape = (img_width, img_height, 3)

model.add(Conv2D(32, (2, 2), input_shape=input_shape))

model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(2, 2)))


model.add(Conv2D(32, (2, 2)))

model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(2, 2)))


model.add(Conv2D(64, (2, 2)))

model.add(Activation('relu'))

model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())

model.add(Dense(64))

model.add(Activation('relu'))

model.add(Dropout(0.5))

model.add(Dense(1))

model.add(Activation('sigmoid'))

model.summary()

import tensorflow.keras.optimizers as Opt

model.compile(loss='binary_crossentropy',
              optimizer=Opt.Adam(),
              metrics=["accuracy"]
              )

import numpy as np

history = model.fit_generator(
      train_generator,
      steps_per_epoch=100,
      epochs=2,
      validation_data=val_generator,
      validation_steps=50,
      verbose=2)
model.save("model.h5") #steps

from google.colab import files
with open("image.txt", "w") as a:
  a.write("https://thumbs.dreamstime.com/b/golden-retriever-dog-21668976.jpg")
files.download('image.txt')

from keras.models import load_model
from tensorflow.keras.utils import load_img
with open("image.txt", 'r') as f:
  img_path = f.read()
model = load_model("model.h5")
image  = load_img(path=img_path, target_size = (150,150))
img = np.array(image)
img = img / 255.0

img = img.reshape(1,150,150,3)

label = model.predict(img)

print("Predicted Class (0 - Cars , 1- Planes): ", label[0][0])